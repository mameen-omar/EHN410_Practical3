<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="rsa_8h" kind="file" language="C++">
    <compoundname>rsa.h</compoundname>
    <includes refid="random_number_generator_8h" local="yes">randomNumberGenerator.h</includes>
    <includes local="no">math.h</includes>
    <includedby refid="rsa_8c" local="yes">rsa.c</includedby>
    <includedby refid="rsadecrypt_8h" local="yes">rsadecrypt.h</includedby>
    <includedby refid="rsaencrypt_8h" local="yes">rsaencrypt.h</includedby>
    <includedby refid="rsakeygen_8h" local="yes">rsakeygen.h</includedby>
    <includedby refid="rsa_tester_8c" local="yes">rsaTester.c</includedby>
    <incdepgraph>
      <node id="168">
        <label>stdbool.h</label>
      </node>
      <node id="163">
        <label>stdarg.h</label>
      </node>
      <node id="165">
        <label>stdint.h</label>
      </node>
      <node id="167">
        <label>stdlib.h</label>
      </node>
      <node id="158">
        <label>rsa.h</label>
        <link refid="rsa_8h"/>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
      </node>
      <node id="169">
        <label>textConverter.h</label>
        <link refid="text_converter_8h"/>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
      </node>
      <node id="166">
        <label>string.h</label>
      </node>
      <node id="160">
        <label>rc4Lib.h</label>
        <link refid="rc4_lib_8h"/>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
      </node>
      <node id="170">
        <label>math.h</label>
      </node>
      <node id="162">
        <label>gmp.h</label>
      </node>
      <node id="164">
        <label>obstack.h</label>
      </node>
      <node id="161">
        <label>stdio.h</label>
      </node>
      <node id="159">
        <label>randomNumberGenerator.h</label>
        <link refid="random_number_generator_8h"/>
        <childnode refid="160" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="176">
        <label>rsaencrypt.c</label>
        <link refid="rsaencrypt_8c"/>
      </node>
      <node id="175">
        <label>rsaencrypt.h</label>
        <link refid="rsaencrypt_8h"/>
        <childnode refid="176" relation="include">
        </childnode>
      </node>
      <node id="179">
        <label>rsaTester.c</label>
        <link refid="rsa_tester_8c"/>
      </node>
      <node id="172">
        <label>rsa.c</label>
        <link refid="rsa_8c"/>
      </node>
      <node id="171">
        <label>rsa.h</label>
        <link refid="rsa_8h"/>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
      </node>
      <node id="174">
        <label>rsadecrypt.c</label>
        <link refid="rsadecrypt_8c"/>
      </node>
      <node id="173">
        <label>rsadecrypt.h</label>
        <link refid="rsadecrypt_8h"/>
        <childnode refid="174" relation="include">
        </childnode>
      </node>
      <node id="178">
        <label>rsakeygen.c</label>
        <link refid="rsakeygen_8c"/>
      </node>
      <node id="177">
        <label>rsakeygen.h</label>
        <link refid="rsakeygen_8h"/>
        <childnode refid="178" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structrsactx__t" prot="public">rsactx_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="rsa_8h_1a41e602bedc2bfcd50c6e35bfb6279ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rsaInit</definition>
        <argsstring>(rsactx_t *rsaCtx)</argsstring>
        <name>rsaInit</name>
        <param>
          <type><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref> *</type>
          <declname>rsaCtx</declname>
        </param>
        <briefdescription>
<para>rsaInit - Function used to initialize the RSA context state structure passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsaCtx.</parametername>
</parameternamelist>
<parameterdescription>
<para>Used as a helper function for the constructRSAContext function. Does not need to be explicitly called by the user. Initializes all mpz library variables used as required.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rsaCtx</parametername>
</parameternamelist>
<parameterdescription>
<para>- rsactx_t* - A pointer to the RSA context state structure to initialize. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.h" line="40" column="1" bodyfile="rsa.c" bodystart="54" bodyend="67"/>
        <references refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" compoundref="rsa_8h" startline="21">rsactx_t::p</references>
        <references refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" compoundref="rsa_8h" startline="22">rsactx_t::q</references>
        <references refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" compoundref="rsa_8h" startline="23">rsactx_t::e</references>
        <references refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" compoundref="rsa_8h" startline="24">rsactx_t::d</references>
        <references refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" compoundref="rsa_8h" startline="25">rsactx_t::qn</references>
        <references refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" compoundref="rsa_8h" startline="26">rsactx_t::n</references>
        <references refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="mod_8py" startline="1">mod.x</references>
        <references refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" compoundref="rsa_8h" startline="30">rsactx_t::KU</references>
        <references refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" compoundref="rsa_8h" startline="31">rsactx_t::KR</references>
        <referencedby refid="rsa_8h_1a32b449824145177f99b25444768d5d3d" compoundref="rsa_8c" startline="35" endline="46">constructRSAContext</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a32b449824145177f99b25444768d5d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref> *</type>
        <definition>rsactx_t* constructRSAContext</definition>
        <argsstring>(unsigned char *initKey, uint8_t initKeyLength, int isKeyHex, int numBits)</argsstring>
        <name>constructRSAContext</name>
        <param>
          <type>unsigned char *</type>
          <declname>initKey</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>initKeyLength</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isKeyHex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numBits</declname>
        </param>
        <briefdescription>
<para>constructRSAContext - Function used to construct the RSA context structure used for RSA key-pair generation. The function allocates all memory required. In addition, the function initializes the random number generator (RC4 key stream) using the key passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initKey</parametername>
<parametername>used</parametername>
</parameternamelist>
<parameterdescription>
<para>for the generation of the RSA key-pairs. The function calls rsaInit function to aid in initialization. The caller must use cleanRSA in order to deallocate all memory once the key-pair has been generated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unsigned</parametername>
</parameternamelist>
<parameterdescription>
<para>char* - initKey - The key used to initialize the random number generator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initKeyLength</parametername>
</parameternamelist>
<parameterdescription>
<para>- uint8_t - The length of the key passed in as </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initKey.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isKeyHex</parametername>
</parameternamelist>
<parameterdescription>
<para>- int - a flag indicating whether the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initKey</parametername>
</parameternamelist>
<parameterdescription>
<para>is a hex string or ascii encoded string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBits</parametername>
</parameternamelist>
<parameterdescription>
<para>- int - the number of bits required for the public and private RSA key pair to be generated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rsactx_t* - A pointer to the RSA context structure used to store the state of the RSA key generation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.h" line="54" column="1" bodyfile="rsa.c" bodystart="35" bodyend="46"/>
        <references refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" compoundref="rsa_8h" startline="28">rsactx_t::initKey</references>
        <references refid="structrsactx__t_1abf718bf2d3f32965c978cc96c1b746c2" compoundref="rsa_8h" startline="29">rsactx_t::initKeyLength</references>
        <references refid="random_number_generator_8c_1ab5420f1783a3b4d2801c80232daaac65" compoundref="random_number_generator_8c" startline="32" endline="39">rseed</references>
        <references refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" compoundref="rsa_8h" startline="27">rsactx_t::numBits</references>
        <references refid="rsa_8c_1a41e602bedc2bfcd50c6e35bfb6279ab5" compoundref="rsa_8c" startline="54" endline="67">rsaInit</references>
        <referencedby refid="rsakeygen_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsakeygen_8c" startline="15" endline="181">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a00fa4aa44618d82f5ef6ec9523cbc165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rsaWriteKeysToFile</definition>
        <argsstring>(rsactx_t *rsaCtx, unsigned char *publicKeyFileName, unsigned char *privateKeyFileName)</argsstring>
        <name>rsaWriteKeysToFile</name>
        <param>
          <type><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref> *</type>
          <declname>rsaCtx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>publicKeyFileName</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>privateKeyFileName</declname>
        </param>
        <briefdescription>
<para>rsaWriteKeysToFile - Function used to write the public and private keys store in the RSA Context passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsaCtx</parametername>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>the </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>publicKeyFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>and </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>privateKeyFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>respectively. The RSA private and public keys are written to the files in accordance with the practical specification. With the n paramter followed by a newline character, followed by d/e and finally a newline character.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rsaCtx</parametername>
</parameternamelist>
<parameterdescription>
<para>- rsactx_t* - The RSA context containing the public and private key pair to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>publicKeyFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The file to write the RSA public key to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>privateKeyFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The file to write the RSA private key to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.h" line="66" column="1" bodyfile="rsa.c" bodystart="345" bodyend="375"/>
        <references refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" compoundref="rsa_8h" startline="30">rsactx_t::KU</references>
        <references refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" compoundref="rsa_8h" startline="31">rsactx_t::KR</references>
        <referencedby refid="rsakeygen_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsakeygen_8c" startline="15" endline="181">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1ac2eb184f89ce2e058ce11f75d2babdd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void generateRsaKeys</definition>
        <argsstring>(rsactx_t *rsaCtx)</argsstring>
        <name>generateRsaKeys</name>
        <param>
          <type><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref> *</type>
          <declname>rsaCtx</declname>
        </param>
        <briefdescription>
<para>generateRsaKeys - Function used to generate the RSA public and private key-pair according to the specifications within the RSA state passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsaCtx.</parametername>
</parameternamelist>
<parameterdescription>
<para>Makes use of the mpz libraries in order to compute the prime numbers used for the p and q variables used during RSA key generation. The function does check for negative values for the &quot;d&quot; parameter as a result of under and overflows and makes the required adjustments. Stores the RSA key pair and the parameters used during RSA key generation in the RSA state structure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rsaCtx</parametername>
</parameternamelist>
<parameterdescription>
<para>- rsactx_t* - The RSA context state to use for the RSA key-pair generation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.h" line="76" column="1" bodyfile="rsa.c" bodystart="77" bodyend="120"/>
        <references refid="rsa_8c_1aed0dce0633aa439d9479beab9822c6b8" compoundref="rsa_8c" startline="133" endline="162">getPrime</references>
        <references refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" compoundref="rsa_8h" startline="21">rsactx_t::p</references>
        <references refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" compoundref="rsa_8h" startline="27">rsactx_t::numBits</references>
        <references refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" compoundref="rsa_8h" startline="22">rsactx_t::q</references>
        <references refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" compoundref="rsa_8h" startline="26">rsactx_t::n</references>
        <references refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" compoundref="rsa_8h" startline="25">rsactx_t::qn</references>
        <references refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" compoundref="rsa_8h" startline="23">rsactx_t::e</references>
        <references refid="rsa_8c_1a13b747bc378147fe06b9ddbb9e5850d6" compoundref="rsa_8c" startline="21">CONSTANTE</references>
        <references refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" compoundref="rsa_8h" startline="24">rsactx_t::d</references>
        <references refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" compoundref="rsa_8h" startline="30">rsactx_t::KU</references>
        <references refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" compoundref="rsa_8h" startline="31">rsactx_t::KR</references>
        <referencedby refid="rsakeygen_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsakeygen_8c" startline="15" endline="181">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a94acde740fd5f6523c71d9310074e1ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rsaEncrypt</definition>
        <argsstring>(unsigned char *outputFile, unsigned char *publicKeyFile, unsigned char *plainText, size_t isPlaintextHex)</argsstring>
        <name>rsaEncrypt</name>
        <param>
          <type>unsigned char *</type>
          <declname>outputFile</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>publicKeyFile</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>plainText</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>isPlaintextHex</declname>
        </param>
        <briefdescription>
<para>rsaEncrypt - Function used to encrypt the plaintext passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plainText</parametername>
</parameternamelist>
<parameterdescription>
<para>using RSA encryption and write the resulting ciphertext to the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFile</parametername>
</parameternamelist>
<parameterdescription>
<para>in decimal. Function treats the entire plainText as the a single decimal value and performs the RSA encryption. The function reads in the public key and writes the result to the output file.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFile</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - File to write the ciphertext to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>publicKeyFile</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The file containing the public key to use during RSA encryption. The &quot;n&quot; paramter should be on the first line, followed by the newline character thereafter the &quot;e&quot; paramter should be placed in the public key file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plainText</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The plaintext to encrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isPlaintextHex</parametername>
</parameternamelist>
<parameterdescription>
<para>- size_t - a flag used to indicate if the plaintext is encoded using ascii or hex encoding. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.h" line="89" column="1" bodyfile="rsa.c" bodystart="175" bodyend="244"/>
        <references refid="namespacetest_1a76f11d9a0a47b94f72c2d0e77fb32240" compoundref="test_8py" startline="4">test.n</references>
        <referencedby refid="rsaencrypt_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsaencrypt_8c" startline="17" endline="158">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a7195163cfaccb994f5b3f28655d6e280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rsaDecrypt</definition>
        <argsstring>(unsigned char *outputFile, unsigned char *privateKeyFile, unsigned char *cipherText)</argsstring>
        <name>rsaDecrypt</name>
        <param>
          <type>unsigned char *</type>
          <declname>outputFile</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>privateKeyFile</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>cipherText</declname>
        </param>
        <briefdescription>
<para>rsaDecrypt - Function used to decrypt the ciphertext passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipherText</parametername>
</parameternamelist>
<parameterdescription>
<para>using RSA decryption and write the resulting plaintext to the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFile</parametername>
</parameternamelist>
<parameterdescription>
<para>as a string using ascii plaintext encoding. Function treats the entire cipherText as the a single decimal value and performs the RSA decryption. The function reads in the private key and writes the result to the output file.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFile</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - File to write the plaintext to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>privateKeyFile</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The file containing the private key to use during RSA decryption. The &quot;n&quot; paramter should be on the first line, followed by the newline character thereafter the &quot;d&quot; paramter should be placed in the private key file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherText</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The ciphertext to decrypt. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.h" line="101" column="1" bodyfile="rsa.c" bodystart="256" bodyend="334"/>
        <references refid="namespacetest_1a76f11d9a0a47b94f72c2d0e77fb32240" compoundref="test_8py" startline="4">test.n</references>
        <referencedby refid="rsadecrypt_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsadecrypt_8c" startline="16" endline="150">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1aed0dce0633aa439d9479beab9822c6b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPrime</definition>
        <argsstring>(mpz_t p, int bits)</argsstring>
        <name>getPrime</name>
        <param>
          <type>mpz_t</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>getPrime - Function used to generate a prime number of length </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>and store it in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p.</parametername>
</parameternamelist>
<parameterdescription>
<para>Used for RSA key-pair generation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>should be half the length of the total length of the key required for the RSA keys. The function generates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>- 1 random numbers using the RC4 random key stream generator and uses the LSB of each random number generated as a bit in the in the final prime number. Once the random number of bits length is generated, the mpz_nextprime is used to get the closest prime number to the random number generated and store it in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.h" line="114" column="1" bodyfile="rsa.c" bodystart="133" bodyend="162"/>
        <references refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="mod_8py" startline="1">mod.x</references>
        <references refid="namespacersa_key_gen_tester_1a6023da76f3e2f519f3bf815647980313" compoundref="rsa_key_gen_tester_8py" startline="7">rsaKeyGenTester.bits</references>
        <references refid="random_number_generator_8c_1a23a480165b4fdecf428a20ab7fbf3bcc" compoundref="random_number_generator_8c" startline="45" endline="54">rrand</references>
        <referencedby refid="rsa_8h_1ac2eb184f89ce2e058ce11f75d2babdd4" compoundref="rsa_8c" startline="77" endline="120">generateRsaKeys</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a89855ab18349364b596e545d789ba03d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rsaClean</definition>
        <argsstring>(rsactx_t *rsaCtx)</argsstring>
        <name>rsaClean</name>
        <param>
          <type><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref> *</type>
          <declname>rsaCtx</declname>
        </param>
        <briefdescription>
<para>rsaClean - Function used to deallocate all memory allocated for the RSA context state structure in </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsaCtx.</parametername>
</parameternamelist>
<parameterdescription>
<para>In addition deallocates all memory used for the random number generator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rsaCtx</parametername>
</parameternamelist>
<parameterdescription>
<para>- rsactx_t* - The RSA context state to deallocate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.h" line="121" column="1" bodyfile="rsa.c" bodystart="382" bodyend="407"/>
        <references refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" compoundref="rsa_8h" startline="21">rsactx_t::p</references>
        <references refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" compoundref="rsa_8h" startline="22">rsactx_t::q</references>
        <references refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" compoundref="rsa_8h" startline="23">rsactx_t::e</references>
        <references refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" compoundref="rsa_8h" startline="24">rsactx_t::d</references>
        <references refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" compoundref="rsa_8h" startline="25">rsactx_t::qn</references>
        <references refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" compoundref="rsa_8h" startline="26">rsactx_t::n</references>
        <references refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="mod_8py" startline="1">mod.x</references>
        <references refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" compoundref="rsa_8h" startline="30">rsactx_t::KU</references>
        <references refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" compoundref="rsa_8h" startline="31">rsactx_t::KR</references>
        <references refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" compoundref="rsa_8h" startline="28">rsactx_t::initKey</references>
        <references refid="structrsactx__t_1abf718bf2d3f32965c978cc96c1b746c2" compoundref="rsa_8h" startline="29">rsactx_t::initKeyLength</references>
        <references refid="random_number_generator_8c_1af6cd3a9729eb08f182d0b2df8bd8c7d8" compoundref="random_number_generator_8c" startline="61" endline="67">destroyRNG</references>
        <references refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" compoundref="rsa_8h" startline="27">rsactx_t::numBits</references>
        <referencedby refid="rsakeygen_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsakeygen_8c" startline="15" endline="181">main</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>RSA library function prototype file. This file contains the necessary functionality to perform RSA key generation as well as encryption/decryption. The functions in this file consist of RSA key generation, RSA encryption, RSA decryption, Getting prime numbers and writing the keys to a file. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="authors"><para>Mohamed Ameen Omar (u16055323) </para></simplesect>
<simplesect kind="authors"><para>Douglas Healy (u16018100) </para></simplesect>
<simplesect kind="authors"><para>Llewellyn Moyse (u15100708) </para></simplesect>
<simplesect kind="version"><para>0.1 </para></simplesect>
<simplesect kind="date"><para>2019-05-22</para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="15"><highlight class="preprocessor">#ifndef<sp/>RSA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RSA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="random_number_generator_8h" kindref="compound">randomNumberGenerator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="structrsactx__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="21" refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/><ref refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" kindref="member">p</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/><ref refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" kindref="member">q</ref>;<sp/></highlight><highlight class="comment">//<sp/>prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/><ref refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" kindref="member">e</ref>;<sp/></highlight><highlight class="comment">//<sp/>e<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/><ref refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" kindref="member">d</ref>;<sp/></highlight><highlight class="comment">//<sp/>d<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/><ref refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" kindref="member">qn</ref>;<sp/></highlight><highlight class="comment">//<sp/>Q(n)<sp/>-<sp/>Euler&apos;s<sp/>totient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/><ref refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" kindref="member">n</ref>;<sp/></highlight><highlight class="comment">//<sp/>n=<sp/>pq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" kindref="member">numBits</ref>;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>bits<sp/>for<sp/>the<sp/>key<sp/>to<sp/>generate<sp/>(public<sp/>and<sp/>private<sp/>keys)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" kindref="member">initKey</ref>;<sp/></highlight></codeline>
<codeline lineno="29" refid="structrsactx__t_1abf718bf2d3f32965c978cc96c1b746c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structrsactx__t_1abf718bf2d3f32965c978cc96c1b746c2" kindref="member">initKeyLength</ref>;<sp/></highlight><highlight class="comment">//<sp/>length<sp/>of<sp/>RNG<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/>KU[2];<sp/></highlight><highlight class="comment">//e,n<sp/>-<sp/>Public<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/>KR[2];<sp/></highlight><highlight class="comment">//d,n<sp/>-<sp/>Private</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">}<sp/><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a41e602bedc2bfcd50c6e35bfb6279ab5" kindref="member">rsaInit</ref>(<ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>*<sp/>rsaCtx);<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>*<sp/><ref refid="rsa_8h_1a32b449824145177f99b25444768d5d3d" kindref="member">constructRSAContext</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>initKey,<sp/>uint8_t<sp/>initKeyLength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isKeyHex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBits);<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a00fa4aa44618d82f5ef6ec9523cbc165" kindref="member">rsaWriteKeysToFile</ref>(<ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>*<sp/>rsaCtx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>publicKeyFileName,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>privateKeyFileName);<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1ac2eb184f89ce2e058ce11f75d2babdd4" kindref="member">generateRsaKeys</ref>(<ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>*<sp/>rsaCtx);<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a94acde740fd5f6523c71d9310074e1ca" kindref="member">rsaEncrypt</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>outputFile,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>publicKeyFile,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>plainText,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>isPlaintextHex);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a7195163cfaccb994f5b3f28655d6e280" kindref="member">rsaDecrypt</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>outputFile,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>privateKeyFile,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cipherText);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1aed0dce0633aa439d9479beab9822c6b8" kindref="member">getPrime</ref>(mpz_t<sp/>p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacersa_key_gen_tester_1a6023da76f3e2f519f3bf815647980313" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a89855ab18349364b596e545d789ba03d" kindref="member">rsaClean</ref>(<ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>*<sp/>rsaCtx);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="rsa.h"/>
  </compounddef>
</doxygen>
