<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="text_converter_8c" kind="file" language="C++">
    <compoundname>textConverter.c</compoundname>
    <includes refid="text_converter_8h" local="yes">textConverter.h</includes>
    <incdepgraph>
      <node id="303">
        <label>stdbool.h</label>
      </node>
      <node id="300">
        <label>stdint.h</label>
      </node>
      <node id="302">
        <label>stdlib.h</label>
      </node>
      <node id="297">
        <label>textConverter.c</label>
        <link refid="text_converter_8c"/>
        <childnode refid="298" relation="include">
        </childnode>
      </node>
      <node id="298">
        <label>textConverter.h</label>
        <link refid="text_converter_8h"/>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
      </node>
      <node id="301">
        <label>string.h</label>
      </node>
      <node id="299">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="text_converter_8c_1a7e5ab2188af44718071074f450963568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t hexToInt</definition>
        <argsstring>(char ch)</argsstring>
        <name>hexToInt</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>hexToInt - Function that converts a given hex value into an integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>- hex value that wil be converted to int. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t the converted int value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="textConverter.c" line="23" column="1" bodyfile="textConverter.c" bodystart="23" bodyend="35"/>
        <referencedby refid="text_converter_8h_1aa177516503b10de65b504a3714073ad7" compoundref="text_converter_8c" startline="42" endline="47">hexToAscii</referencedby>
      </memberdef>
      <memberdef kind="function" id="text_converter_8c_1aa177516503b10de65b504a3714073ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t hexToAscii</definition>
        <argsstring>(char ch1, char ch2)</argsstring>
        <name>hexToAscii</name>
        <param>
          <type>char</type>
          <declname>ch1</declname>
        </param>
        <param>
          <type>char</type>
          <declname>ch2</declname>
        </param>
        <briefdescription>
<para>hexToAscii - Function that converts a given hex value to its ASCII equivalent. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ch1</parametername>
</parameternamelist>
<parameterdescription>
<para>- char value of the first hex value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch2</parametername>
</parameternamelist>
<parameterdescription>
<para>- char value of the second hex value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="textConverter.c" line="42" column="1" bodyfile="textConverter.c" bodystart="42" bodyend="47"/>
        <references refid="text_converter_8c_1a7e5ab2188af44718071074f450963568" compoundref="text_converter_8c" startline="23" endline="35">hexToInt</references>
        <referencedby refid="text_converter_8h_1ad697cbb5d9e462b3017df1f1d939ee96" compoundref="text_converter_8c" startline="61" endline="74">hexToAsciiString</referencedby>
      </memberdef>
      <memberdef kind="function" id="text_converter_8c_1ad697cbb5d9e462b3017df1f1d939ee96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hexToAsciiString</definition>
        <argsstring>(char *hexString, char *asciiString, int hexStringLength)</argsstring>
        <name>hexToAsciiString</name>
        <param>
          <type>char *</type>
          <declname>hexString</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>asciiString</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hexStringLength</declname>
        </param>
        <briefdescription>
<para>hexToAsciiString - Function that converts a given string of hex values into its ASCII equivalent. A hex string contains hex chars and is &quot;encoded&quot; in ascii In order to encrypt it, it must be converted to the equivalent ascii plain text string plaintext string is half the size of hex, since two hex chars = 1 ascii char if hex string is &quot;4A&quot; it will be converted to &quot;J&quot; in ascii which will have a hex representation of &quot;4a&quot; The original hex string converted to hex staright or printed in hex straight rather will print or have the value &quot;0x34&quot;, &quot;0x31&quot; BASICALLY THE HEX STRING FF IS INTERPRETED AS THE CHARS FF, whereas when using this function we intend it to be &quot;J&quot;, ie the char &quot;J&quot; </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>char*</parametername>
</parameternamelist>
<parameterdescription>
<para>hexString - The string of hex values to be converted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>char*</parametername>
</parameternamelist>
<parameterdescription>
<para>asciiString - The output of the converted hex string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>hexStringLength - The length of parameter hexString. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="textConverter.c" line="61" column="1" bodyfile="textConverter.c" bodystart="61" bodyend="74"/>
        <references refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="mod_8py" startline="1">mod.x</references>
        <references refid="text_converter_8c_1aa177516503b10de65b504a3714073ad7" compoundref="text_converter_8c" startline="42" endline="47">hexToAscii</references>
        <referencedby refid="rc4_lib_8h_1ad5d6c36612836b2ef2cce2a11e069b81" compoundref="rc4_lib_8c" startline="140" endline="212">performRc4</referencedby>
        <referencedby refid="text_converter_8h_1afba897e91364663f883cc51ed309dc92" compoundref="text_converter_8c" startline="104" endline="111">keyHexToAscii</referencedby>
      </memberdef>
      <memberdef kind="function" id="text_converter_8c_1ac189aee6672718650020cf627d45c780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char* asciiToHexString</definition>
        <argsstring>(unsigned char *asciiString, unsigned char *hexString, size_t asciiStringLen)</argsstring>
        <name>asciiToHexString</name>
        <param>
          <type>unsigned char *</type>
          <declname>asciiString</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>hexString</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>asciiStringLen</declname>
        </param>
        <briefdescription>
<para>Function name: asciiToHexString - convert an ascii String to an ascii string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asciiString</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* pointing to the ASCII String to be converted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hexString</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* pointing to a memory where the converted Hex string should be stored. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asciiStringLen</parametername>
</parameternamelist>
<parameterdescription>
<para>- size_t containing the length of the ASCII String to be converted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned char* asciiToHexString - pointer to the converted Hex String, pointing to the same memory location as </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hexString.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="textConverter.c" line="84" column="1" bodyfile="textConverter.c" bodystart="84" bodyend="95"/>
        <references refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="mod_8py" startline="1">mod.x</references>
      </memberdef>
      <memberdef kind="function" id="text_converter_8c_1afba897e91364663f883cc51ed309dc92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char* keyHexToAscii</definition>
        <argsstring>(unsigned char *hexKey, int keyLength)</argsstring>
        <name>keyHexToAscii</name>
        <param>
          <type>unsigned char *</type>
          <declname>hexKey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>keyLength</declname>
        </param>
        <briefdescription>
<para>keyHexToAscii - Function to convert a hex encoded key to an ascii string. The caller must ensure they deallocate the memory allocated for the returned ascii encoded string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hexKey</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - the hexadecimal encoded key to convert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyLength</parametername>
</parameternamelist>
<parameterdescription>
<para>- int - the length of the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hexKey.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned char* - The resulting ascii encoded string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="textConverter.c" line="104" column="1" bodyfile="textConverter.c" bodystart="104" bodyend="111"/>
        <references refid="text_converter_8c_1ad697cbb5d9e462b3017df1f1d939ee96" compoundref="text_converter_8c" startline="61" endline="74">hexToAsciiString</references>
        <referencedby refid="rc4_lib_8h_1adf2f7c39612e593f25961008b04cb22f" compoundref="rc4_lib_8c" startline="68" endline="96">rc4Init</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The text converter libary implementation file. This file contains functions used to convert between different bases of text. Such as conversion from ascii to hex, hex to ascii, hex to int. This is used for encryption when a certian base is required, different from the one provided. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="authors"><para>Mohamed Ameen Omar (u16055323) </para></simplesect>
<simplesect kind="authors"><para>Douglas Healy (u16018100) </para></simplesect>
<simplesect kind="authors"><para>Llewellyn Moyse (u15100708) </para></simplesect>
<simplesect kind="version"><para>0.1 </para></simplesect>
<simplesect kind="date"><para>2019-05-22</para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="15"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="text_converter_8h" kindref="compound">textConverter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="text_converter_8h_1a7e5ab2188af44718071074f450963568" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="text_converter_8c_1a7e5ab2188af44718071074f450963568" kindref="member">hexToInt</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ch<sp/>&gt;=97)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>ch<sp/>-<sp/>32;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>first<sp/>=<sp/>(ch<sp/>/<sp/>16)<sp/>-<sp/>3;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>second<sp/>=<sp/>ch<sp/>%<sp/>16;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>asciiChar<sp/>=<sp/>(first*10)<sp/>+<sp/>second;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(asciiChar<sp/>&gt;<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asciiChar--;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asciiChar;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="text_converter_8h_1aa177516503b10de65b504a3714073ad7" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="text_converter_8c_1aa177516503b10de65b504a3714073ad7" kindref="member">hexToAscii</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch2)<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>highByte<sp/>=<sp/><ref refid="text_converter_8c_1a7e5ab2188af44718071074f450963568" kindref="member">hexToInt</ref>(ch1)<sp/>*<sp/>16;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>lowByte<sp/>=<sp/><ref refid="text_converter_8c_1a7e5ab2188af44718071074f450963568" kindref="member">hexToInt</ref>(ch2);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>highByte<sp/>+<sp/>lowByte;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="text_converter_8h_1ad697cbb5d9e462b3017df1f1d939ee96" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="text_converter_8c_1ad697cbb5d9e462b3017df1f1d939ee96" kindref="member">hexToAsciiString</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>hexString,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>asciiString,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hexStringLength)<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>asciiIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tempChar<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>0;<sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>&lt;<sp/>hexStringLength;<sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>%<sp/>2<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asciiString[asciiIndex]<sp/>=<sp/><ref refid="text_converter_8c_1aa177516503b10de65b504a3714073ad7" kindref="member">hexToAscii</ref>(tempChar,<sp/>hexString[<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>]);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asciiIndex++;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempChar<sp/>=<sp/>hexString[<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="text_converter_8h_1ac189aee6672718650020cf627d45c780" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="text_converter_8c_1ac189aee6672718650020cf627d45c780" kindref="member">asciiToHexString</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*asciiString,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>hexString,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>asciiStringLen)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(asciiString<sp/>==<sp/>NULL<sp/>||<sp/>asciiStringLen<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>0;<sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>&lt;<sp/>asciiStringLen;<sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexString[<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>*2]<sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789abcdef&quot;</highlight><highlight class="normal">[asciiString[<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>]<sp/>&gt;&gt;<sp/>4];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexString[<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>*2+1]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789abcdef&quot;</highlight><highlight class="normal">[asciiString[<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>]<sp/>&amp;<sp/>0x0F];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hexString;<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="text_converter_8h_1afba897e91364663f883cc51ed309dc92" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="text_converter_8c_1afba897e91364663f883cc51ed309dc92" kindref="member">keyHexToAscii</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>hexKey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLength)<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>keyLength<sp/>=<sp/>keyLength/2;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tempKey<sp/>=<sp/>calloc(keyLength,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>ascii<sp/>store<sp/>in<sp/>temp<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="text_converter_8c_1ad697cbb5d9e462b3017df1f1d939ee96" kindref="member">hexToAsciiString</ref>(hexKey,tempKey,keyLength*2);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tempKey;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="textConverter.c"/>
  </compounddef>
</doxygen>
