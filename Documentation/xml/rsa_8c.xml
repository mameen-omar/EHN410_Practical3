<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="rsa_8c" kind="file" language="C++">
    <compoundname>rsa.c</compoundname>
    <includes refid="rsa_8h" local="yes">rsa.h</includes>
    <incdepgraph>
      <node id="154">
        <label>stdbool.h</label>
      </node>
      <node id="149">
        <label>stdarg.h</label>
      </node>
      <node id="151">
        <label>stdint.h</label>
      </node>
      <node id="153">
        <label>stdlib.h</label>
      </node>
      <node id="143">
        <label>rsa.c</label>
        <link refid="rsa_8c"/>
        <childnode refid="144" relation="include">
        </childnode>
      </node>
      <node id="144">
        <label>rsa.h</label>
        <link refid="rsa_8h"/>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
      </node>
      <node id="155">
        <label>textConverter.h</label>
        <link refid="text_converter_8h"/>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
      </node>
      <node id="152">
        <label>string.h</label>
      </node>
      <node id="146">
        <label>rc4Lib.h</label>
        <link refid="rc4_lib_8h"/>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
      </node>
      <node id="156">
        <label>math.h</label>
      </node>
      <node id="148">
        <label>gmp.h</label>
      </node>
      <node id="150">
        <label>obstack.h</label>
      </node>
      <node id="147">
        <label>stdio.h</label>
      </node>
      <node id="145">
        <label>randomNumberGenerator.h</label>
        <link refid="random_number_generator_8h"/>
        <childnode refid="146" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="rsa_8c_1a13b747bc378147fe06b9ddbb9e5850d6" prot="public" static="no" mutable="no">
        <type>const int64_t</type>
        <definition>const int64_t CONSTANTE</definition>
        <argsstring></argsstring>
        <name>CONSTANTE</name>
        <initializer>= 65537</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.c" line="21" column="1" bodyfile="rsa.c" bodystart="21" bodyend="-1"/>
        <referencedby refid="rsa_8h_1ac2eb184f89ce2e058ce11f75d2babdd4" compoundref="rsa_8c" startline="77" endline="120">generateRsaKeys</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="rsa_8c_1a32b449824145177f99b25444768d5d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref> *</type>
        <definition>rsactx_t* constructRSAContext</definition>
        <argsstring>(unsigned char *initKey, uint8_t initKeyLength, int isKeyHex, int numBits)</argsstring>
        <name>constructRSAContext</name>
        <param>
          <type>unsigned char *</type>
          <declname>initKey</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>initKeyLength</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isKeyHex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numBits</declname>
        </param>
        <briefdescription>
<para>constructRSAContext - Function used to construct the RSA context structure used for RSA key-pair generation. The function allocates all memory required. In addition, the function initializes the random number generator (RC4 key stream) using the key passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initKey</parametername>
<parametername>used</parametername>
</parameternamelist>
<parameterdescription>
<para>for the generation of the RSA key-pairs. The function calls rsaInit function to aid in initialization. The caller must use cleanRSA in order to deallocate all memory once the key-pair has been generated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unsigned</parametername>
</parameternamelist>
<parameterdescription>
<para>char* - initKey - The key used to initialize the random number generator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initKeyLength</parametername>
</parameternamelist>
<parameterdescription>
<para>- uint8_t - The length of the key passed in as </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initKey.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isKeyHex</parametername>
</parameternamelist>
<parameterdescription>
<para>- int - a flag indicating whether the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initKey</parametername>
</parameternamelist>
<parameterdescription>
<para>is a hex string or ascii encoded string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBits</parametername>
</parameternamelist>
<parameterdescription>
<para>- int - the number of bits required for the public and private RSA key pair to be generated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rsactx_t* - A pointer to the RSA context structure used to store the state of the RSA key generation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.c" line="35" column="1" bodyfile="rsa.c" bodystart="35" bodyend="46"/>
        <references refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" compoundref="rsa_8h" startline="28">rsactx_t::initKey</references>
        <references refid="structrsactx__t_1abf718bf2d3f32965c978cc96c1b746c2" compoundref="rsa_8h" startline="29">rsactx_t::initKeyLength</references>
        <references refid="random_number_generator_8c_1ab5420f1783a3b4d2801c80232daaac65" compoundref="random_number_generator_8c" startline="32" endline="39">rseed</references>
        <references refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" compoundref="rsa_8h" startline="27">rsactx_t::numBits</references>
        <references refid="rsa_8c_1a41e602bedc2bfcd50c6e35bfb6279ab5" compoundref="rsa_8c" startline="54" endline="67">rsaInit</references>
        <referencedby refid="rsakeygen_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsakeygen_8c" startline="15" endline="181">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8c_1a41e602bedc2bfcd50c6e35bfb6279ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rsaInit</definition>
        <argsstring>(rsactx_t *rsaCtx)</argsstring>
        <name>rsaInit</name>
        <param>
          <type><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref> *</type>
          <declname>rsaCtx</declname>
        </param>
        <briefdescription>
<para>rsaInit - Function used to initialize the RSA context state structure passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsaCtx.</parametername>
</parameternamelist>
<parameterdescription>
<para>Used as a helper function for the constructRSAContext function. Does not need to be explicitly called by the user. Initializes all mpz library variables used as required.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rsaCtx</parametername>
</parameternamelist>
<parameterdescription>
<para>- rsactx_t* - A pointer to the RSA context state structure to initialize. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.c" line="54" column="1" bodyfile="rsa.c" bodystart="54" bodyend="67"/>
        <references refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" compoundref="rsa_8h" startline="21">rsactx_t::p</references>
        <references refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" compoundref="rsa_8h" startline="22">rsactx_t::q</references>
        <references refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" compoundref="rsa_8h" startline="23">rsactx_t::e</references>
        <references refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" compoundref="rsa_8h" startline="24">rsactx_t::d</references>
        <references refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" compoundref="rsa_8h" startline="25">rsactx_t::qn</references>
        <references refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" compoundref="rsa_8h" startline="26">rsactx_t::n</references>
        <references refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="mod_8py" startline="1">mod.x</references>
        <references refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" compoundref="rsa_8h" startline="30">rsactx_t::KU</references>
        <references refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" compoundref="rsa_8h" startline="31">rsactx_t::KR</references>
        <referencedby refid="rsa_8h_1a32b449824145177f99b25444768d5d3d" compoundref="rsa_8c" startline="35" endline="46">constructRSAContext</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8c_1ac2eb184f89ce2e058ce11f75d2babdd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void generateRsaKeys</definition>
        <argsstring>(rsactx_t *rsaCtx)</argsstring>
        <name>generateRsaKeys</name>
        <param>
          <type><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref> *</type>
          <declname>rsaCtx</declname>
        </param>
        <briefdescription>
<para>generateRsaKeys - Function used to generate the RSA public and private key-pair according to the specifications within the RSA state passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsaCtx.</parametername>
</parameternamelist>
<parameterdescription>
<para>Makes use of the mpz libraries in order to compute the prime numbers used for the p and q variables used during RSA key generation. The function does check for negative values for the &quot;d&quot; parameter as a result of under and overflows and makes the required adjustments. Stores the RSA key pair and the parameters used during RSA key generation in the RSA state structure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rsaCtx</parametername>
</parameternamelist>
<parameterdescription>
<para>- rsactx_t* - The RSA context state to use for the RSA key-pair generation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.c" line="77" column="1" bodyfile="rsa.c" bodystart="77" bodyend="120"/>
        <references refid="rsa_8c_1aed0dce0633aa439d9479beab9822c6b8" compoundref="rsa_8c" startline="133" endline="162">getPrime</references>
        <references refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" compoundref="rsa_8h" startline="21">rsactx_t::p</references>
        <references refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" compoundref="rsa_8h" startline="27">rsactx_t::numBits</references>
        <references refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" compoundref="rsa_8h" startline="22">rsactx_t::q</references>
        <references refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" compoundref="rsa_8h" startline="26">rsactx_t::n</references>
        <references refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" compoundref="rsa_8h" startline="25">rsactx_t::qn</references>
        <references refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" compoundref="rsa_8h" startline="23">rsactx_t::e</references>
        <references refid="rsa_8c_1a13b747bc378147fe06b9ddbb9e5850d6" compoundref="rsa_8c" startline="21">CONSTANTE</references>
        <references refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" compoundref="rsa_8h" startline="24">rsactx_t::d</references>
        <references refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" compoundref="rsa_8h" startline="30">rsactx_t::KU</references>
        <references refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" compoundref="rsa_8h" startline="31">rsactx_t::KR</references>
        <referencedby refid="rsakeygen_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsakeygen_8c" startline="15" endline="181">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8c_1aed0dce0633aa439d9479beab9822c6b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPrime</definition>
        <argsstring>(mpz_t p, int bits)</argsstring>
        <name>getPrime</name>
        <param>
          <type>mpz_t</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>getPrime - Function used to generate a prime number of length </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>and store it in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p.</parametername>
</parameternamelist>
<parameterdescription>
<para>Used for RSA key-pair generation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>should be half the length of the total length of the key required for the RSA keys. The function generates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>- 1 random numbers using the RC4 random key stream generator and uses the LSB of each random number generated as a bit in the in the final prime number. Once the random number of bits length is generated, the mpz_nextprime is used to get the closest prime number to the random number generated and store it in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.c" line="133" column="1" bodyfile="rsa.c" bodystart="133" bodyend="162"/>
        <references refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="mod_8py" startline="1">mod.x</references>
        <references refid="namespacersa_key_gen_tester_1a6023da76f3e2f519f3bf815647980313" compoundref="rsa_key_gen_tester_8py" startline="7">rsaKeyGenTester.bits</references>
        <references refid="random_number_generator_8c_1a23a480165b4fdecf428a20ab7fbf3bcc" compoundref="random_number_generator_8c" startline="45" endline="54">rrand</references>
        <referencedby refid="rsa_8h_1ac2eb184f89ce2e058ce11f75d2babdd4" compoundref="rsa_8c" startline="77" endline="120">generateRsaKeys</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8c_1a94acde740fd5f6523c71d9310074e1ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rsaEncrypt</definition>
        <argsstring>(unsigned char *outputFile, unsigned char *publicKeyFile, unsigned char *plainText, size_t isPlaintextHex)</argsstring>
        <name>rsaEncrypt</name>
        <param>
          <type>unsigned char *</type>
          <declname>outputFile</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>publicKeyFile</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>plainText</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>isPlaintextHex</declname>
        </param>
        <briefdescription>
<para>rsaEncrypt - Function used to encrypt the plaintext passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plainText</parametername>
</parameternamelist>
<parameterdescription>
<para>using RSA encryption and write the resulting ciphertext to the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFile</parametername>
</parameternamelist>
<parameterdescription>
<para>in decimal. Function treats the entire plainText as the a single decimal value and performs the RSA encryption. The function reads in the public key and writes the result to the output file.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFile</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - File to write the ciphertext to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>publicKeyFile</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The file containing the public key to use during RSA encryption. The &quot;n&quot; paramter should be on the first line, followed by the newline character thereafter the &quot;e&quot; paramter should be placed in the public key file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plainText</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The plaintext to encrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isPlaintextHex</parametername>
</parameternamelist>
<parameterdescription>
<para>- size_t - a flag used to indicate if the plaintext is encoded using ascii or hex encoding. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.c" line="175" column="1" bodyfile="rsa.c" bodystart="175" bodyend="244"/>
        <references refid="namespacetest_1a76f11d9a0a47b94f72c2d0e77fb32240" compoundref="test_8py" startline="4">test.n</references>
        <referencedby refid="rsaencrypt_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsaencrypt_8c" startline="17" endline="158">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8c_1a7195163cfaccb994f5b3f28655d6e280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rsaDecrypt</definition>
        <argsstring>(unsigned char *outputFile, unsigned char *privateKeyFile, unsigned char *cipherText)</argsstring>
        <name>rsaDecrypt</name>
        <param>
          <type>unsigned char *</type>
          <declname>outputFile</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>privateKeyFile</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>cipherText</declname>
        </param>
        <briefdescription>
<para>rsaDecrypt - Function used to decrypt the ciphertext passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipherText</parametername>
</parameternamelist>
<parameterdescription>
<para>using RSA decryption and write the resulting plaintext to the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFile</parametername>
</parameternamelist>
<parameterdescription>
<para>as a string using ascii plaintext encoding. Function treats the entire cipherText as the a single decimal value and performs the RSA decryption. The function reads in the private key and writes the result to the output file.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFile</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - File to write the plaintext to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>privateKeyFile</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The file containing the private key to use during RSA decryption. The &quot;n&quot; paramter should be on the first line, followed by the newline character thereafter the &quot;d&quot; paramter should be placed in the private key file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherText</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The ciphertext to decrypt. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.c" line="256" column="1" bodyfile="rsa.c" bodystart="256" bodyend="334"/>
        <references refid="namespacetest_1a76f11d9a0a47b94f72c2d0e77fb32240" compoundref="test_8py" startline="4">test.n</references>
        <referencedby refid="rsadecrypt_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsadecrypt_8c" startline="16" endline="150">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8c_1a00fa4aa44618d82f5ef6ec9523cbc165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rsaWriteKeysToFile</definition>
        <argsstring>(rsactx_t *rsaCtx, unsigned char *publicKeyFileName, unsigned char *privateKeyFileName)</argsstring>
        <name>rsaWriteKeysToFile</name>
        <param>
          <type><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref> *</type>
          <declname>rsaCtx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>publicKeyFileName</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>privateKeyFileName</declname>
        </param>
        <briefdescription>
<para>rsaWriteKeysToFile - Function used to write the public and private keys store in the RSA Context passed in as </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsaCtx</parametername>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>the </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>publicKeyFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>and </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>privateKeyFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>respectively. The RSA private and public keys are written to the files in accordance with the practical specification. With the n paramter followed by a newline character, followed by d/e and finally a newline character.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rsaCtx</parametername>
</parameternamelist>
<parameterdescription>
<para>- rsactx_t* - The RSA context containing the public and private key pair to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>publicKeyFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The file to write the RSA public key to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>privateKeyFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned char* - The file to write the RSA private key to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.c" line="345" column="1" bodyfile="rsa.c" bodystart="345" bodyend="375"/>
        <references refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" compoundref="rsa_8h" startline="30">rsactx_t::KU</references>
        <references refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" compoundref="rsa_8h" startline="31">rsactx_t::KR</references>
        <referencedby refid="rsakeygen_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsakeygen_8c" startline="15" endline="181">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="rsa_8c_1a89855ab18349364b596e545d789ba03d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rsaClean</definition>
        <argsstring>(rsactx_t *rsaCtx)</argsstring>
        <name>rsaClean</name>
        <param>
          <type><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref> *</type>
          <declname>rsaCtx</declname>
        </param>
        <briefdescription>
<para>rsaClean - Function used to deallocate all memory allocated for the RSA context state structure in </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsaCtx.</parametername>
</parameternamelist>
<parameterdescription>
<para>In addition deallocates all memory used for the random number generator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rsaCtx</parametername>
</parameternamelist>
<parameterdescription>
<para>- rsactx_t* - The RSA context state to deallocate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rsa.c" line="382" column="1" bodyfile="rsa.c" bodystart="382" bodyend="407"/>
        <references refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" compoundref="rsa_8h" startline="21">rsactx_t::p</references>
        <references refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" compoundref="rsa_8h" startline="22">rsactx_t::q</references>
        <references refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" compoundref="rsa_8h" startline="23">rsactx_t::e</references>
        <references refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" compoundref="rsa_8h" startline="24">rsactx_t::d</references>
        <references refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" compoundref="rsa_8h" startline="25">rsactx_t::qn</references>
        <references refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" compoundref="rsa_8h" startline="26">rsactx_t::n</references>
        <references refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="mod_8py" startline="1">mod.x</references>
        <references refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" compoundref="rsa_8h" startline="30">rsactx_t::KU</references>
        <references refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" compoundref="rsa_8h" startline="31">rsactx_t::KR</references>
        <references refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" compoundref="rsa_8h" startline="28">rsactx_t::initKey</references>
        <references refid="structrsactx__t_1abf718bf2d3f32965c978cc96c1b746c2" compoundref="rsa_8h" startline="29">rsactx_t::initKeyLength</references>
        <references refid="random_number_generator_8c_1af6cd3a9729eb08f182d0b2df8bd8c7d8" compoundref="random_number_generator_8c" startline="61" endline="67">destroyRNG</references>
        <references refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" compoundref="rsa_8h" startline="27">rsactx_t::numBits</references>
        <referencedby refid="rsakeygen_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="rsakeygen_8c" startline="15" endline="181">main</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>RSA library implementation file. This file contains the necessary functionality to perform RSA key generation as well as encryption/decryption. The functions in this file consist of RSA key generation, RSA encryption, RSA decryption, Getting prime numbers and writing the keys to a file. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="authors"><para>Mohamed Ameen Omar (u16055323) </para></simplesect>
<simplesect kind="authors"><para>Douglas Healy (u16018100) </para></simplesect>
<simplesect kind="authors"><para>Llewellyn Moyse (u15100708) </para></simplesect>
<simplesect kind="version"><para>0.1 </para></simplesect>
<simplesect kind="date"><para>2019-05-22</para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="15"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rsa_8h" kindref="compound">rsa.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="rsa_8c_1a13b747bc378147fe06b9ddbb9e5850d6" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/><ref refid="rsa_8c_1a13b747bc378147fe06b9ddbb9e5850d6" kindref="member">CONSTANTE</ref><sp/>=<sp/>65537;<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="rsa_8h_1a32b449824145177f99b25444768d5d3d" refkind="member"><highlight class="normal"><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>*<sp/><ref refid="rsa_8c_1a32b449824145177f99b25444768d5d3d" kindref="member">constructRSAContext</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>initKey,<sp/>uint8_t<sp/>initKeyLength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isKeyHex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBits)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>*<sp/>rsaCtx<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" kindref="member">initKey</ref><sp/>=<sp/>calloc(initKeyLength,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(rsaCtx-&gt;<ref refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" kindref="member">initKey</ref>,initKey,initKeyLength);<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1abf718bf2d3f32965c978cc96c1b746c2" kindref="member">initKeyLength</ref><sp/>=<sp/>initKeyLength;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rng</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="random_number_generator_8c_1ab5420f1783a3b4d2801c80232daaac65" kindref="member">rseed</ref>(rsaCtx-&gt;<ref refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" kindref="member">initKey</ref>,<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1abf718bf2d3f32965c978cc96c1b746c2" kindref="member">initKeyLength</ref>,<sp/>isKeyHex);<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" kindref="member">numBits</ref><sp/>=<sp/>numBits;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rsa_8c_1a41e602bedc2bfcd50c6e35bfb6279ab5" kindref="member">rsaInit</ref>(rsaCtx);<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rsaCtx;<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="rsa_8h_1a41e602bedc2bfcd50c6e35bfb6279ab5" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8c_1a41e602bedc2bfcd50c6e35bfb6279ab5" kindref="member">rsaInit</ref>(<ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>*<sp/>rsaCtx)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>all<sp/>for<sp/>rsaCtX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(rsaCtx-&gt;<ref refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" kindref="member">p</ref>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prime<sp/>-<sp/>randomly<sp/>generated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(rsaCtx-&gt;<ref refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" kindref="member">q</ref>);<sp/></highlight><highlight class="comment">//<sp/>prime<sp/>-<sp/>randomly<sp/>generated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(rsaCtx-&gt;<ref refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" kindref="member">e</ref>);<sp/></highlight><highlight class="comment">//<sp/>e<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(rsaCtx-&gt;<ref refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" kindref="member">d</ref>);<sp/></highlight><highlight class="comment">//<sp/>d<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(rsaCtx-&gt;<ref refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" kindref="member">qn</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>Q(n)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(rsaCtx-&gt;<ref refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" kindref="member">n</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>n<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>0;<sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>&lt;2;<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_init(rsaCtx-&gt;<ref refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" kindref="member">KU</ref>[<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>]);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_init(rsaCtx-&gt;<ref refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" kindref="member">KR</ref>[<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>]);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="rsa_8h_1ac2eb184f89ce2e058ce11f75d2babdd4" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8c_1ac2eb184f89ce2e058ce11f75d2babdd4" kindref="member">generateRsaKeys</ref>(<ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>*<sp/>rsaCtx)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Generating<sp/>RSA<sp/>Public<sp/>and<sp/>Private<sp/>Keys\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rsaCtx<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>The<sp/>RSA<sp/>context<sp/>is<sp/>empty.\nCannot<sp/>Generate<sp/>keys.\nExiting.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>primes<sp/>half<sp/>the<sp/>size<sp/>of<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>required<sp/>for<sp/>the<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rsa_8c_1aed0dce0633aa439d9479beab9822c6b8" kindref="member">getPrime</ref>(rsaCtx-&gt;<ref refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" kindref="member">p</ref>,<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" kindref="member">numBits</ref>/2);<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rsa_8c_1aed0dce0633aa439d9479beab9822c6b8" kindref="member">getPrime</ref>(rsaCtx-&gt;<ref refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" kindref="member">q</ref>,<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" kindref="member">numBits</ref>/2);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_mul(rsaCtx-&gt;<ref refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" kindref="member">n</ref>,<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" kindref="member">p</ref>,<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" kindref="member">q</ref>);<sp/></highlight><highlight class="comment">//<sp/>n<sp/>=<sp/>pq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/>qTemp;<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/>pTemp;<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(qTemp);<sp/></highlight><highlight class="comment">//<sp/>used<sp/>for<sp/>q-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(pTemp);<sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>for<sp/>p-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_sub_ui(qTemp,<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" kindref="member">q</ref>,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>q-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_sub_ui(pTemp,<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" kindref="member">p</ref>,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>p-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_mul(rsaCtx-&gt;<ref refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" kindref="member">qn</ref>,<sp/>qTemp,<sp/>pTemp);<sp/></highlight><highlight class="comment">//<sp/>q(n)<sp/>=<sp/>(p-1)(q-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(qTemp);<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(pTemp);<sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_set_ui(rsaCtx-&gt;<ref refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" kindref="member">e</ref>,<sp/><ref refid="rsa_8c_1a13b747bc378147fe06b9ddbb9e5850d6" kindref="member">CONSTANTE</ref>);<sp/></highlight><highlight class="comment">//<sp/>set<sp/>static<sp/>as<sp/>per<sp/>practical<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_invert(rsaCtx-&gt;<ref refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" kindref="member">d</ref>,rsaCtx-&gt;<ref refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" kindref="member">e</ref>,rsaCtx-&gt;<ref refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" kindref="member">qn</ref>);<sp/></highlight><highlight class="comment">//<sp/>calc<sp/>d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mpz_sgn(rsaCtx-&gt;<ref refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" kindref="member">d</ref>)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_add(rsaCtx-&gt;<ref refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" kindref="member">d</ref>,<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" kindref="member">d</ref>,rsaCtx-&gt;<ref refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" kindref="member">qn</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>private<sp/>and<sp/>public<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_set(rsaCtx-&gt;<ref refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" kindref="member">KU</ref>[0],<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" kindref="member">e</ref>);<sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_set(rsaCtx-&gt;<ref refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" kindref="member">KU</ref>[1],<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" kindref="member">n</ref>);<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_set(rsaCtx-&gt;<ref refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" kindref="member">KR</ref>[0],<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" kindref="member">d</ref>);<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_set(rsaCtx-&gt;<ref refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" kindref="member">KR</ref>[1],<sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;p:<sp/>%Zd\n&quot;</highlight><highlight class="normal">,rsaCtx-&gt;<ref refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;q:<sp/>%Zd\n&quot;</highlight><highlight class="normal">,rsaCtx-&gt;<ref refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" kindref="member">q</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;n:<sp/>%Zd\n&quot;</highlight><highlight class="normal">,rsaCtx-&gt;<ref refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;qn:<sp/>%Zd\n&quot;</highlight><highlight class="normal">,rsaCtx-&gt;<ref refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" kindref="member">qn</ref>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;e:<sp/>%Zd\n&quot;</highlight><highlight class="normal">,rsaCtx-&gt;<ref refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" kindref="member">e</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;d:<sp/>%Zd\n&quot;</highlight><highlight class="normal">,rsaCtx-&gt;<ref refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" kindref="member">d</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>RSA<sp/>Public<sp/>and<sp/>Private<sp/>Key<sp/>generation\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="rsa_8h_1aed0dce0633aa439d9479beab9822c6b8" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8c_1aed0dce0633aa439d9479beab9822c6b8" kindref="member">getPrime</ref>(mpz_t<sp/>p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacersa_key_gen_tester_1a6023da76f3e2f519f3bf815647980313" kindref="member">bits</ref>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>binary<sp/>=<sp/>calloc(bits+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>binary[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>set<sp/>MSB<sp/>to<sp/>1<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>generated<sp/>prime<sp/>is<sp/>not<sp/>too<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>1;<sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>&lt;<sp/><ref refid="namespacersa_key_gen_tester_1a6023da76f3e2f519f3bf815647980313" kindref="member">bits</ref>;<sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>a<sp/>random<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>randomByte<sp/>=<sp/><ref refid="random_number_generator_8c_1a23a480165b4fdecf428a20ab7fbf3bcc" kindref="member">rrand</ref>();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_t<sp/>placeholder;<sp/></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>convert<sp/>the<sp/>randomByte<sp/>value<sp/>to<sp/>a<sp/>binary<sp/>string<sp/>and<sp/>extract<sp/>the<sp/>lsb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_init(placeholder);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_set_ui(placeholder,randomByte);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Random<sp/>(hex):<sp/>%X\n&quot;</highlight><highlight class="normal">,<sp/>randomByte);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>randomBinString<sp/>=<sp/>calloc(mpz_sizeinbase(placeholder,<sp/>2)<sp/>+<sp/>2,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>the<sp/>value<sp/>in<sp/>place<sp/>holder<sp/>to<sp/>a<sp/>binary<sp/>string<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_get_str(randomBinString,2,placeholder);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>LSB<sp/>of<sp/>the<sp/>random<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binary[<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>]<sp/>=<sp/>randomBinString[strlen(randomBinString)-1];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cleanup<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(randomBinString);<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_clear(placeholder);<sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_set_str(p,binary,2);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Random<sp/>number<sp/>in<sp/>binary<sp/>is:<sp/>%s<sp/>\n&quot;</highlight><highlight class="normal">,binary);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;The<sp/>random<sp/>number<sp/>(base<sp/>10):<sp/>%Zd\n&quot;</highlight><highlight class="normal">,p);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>free(binary);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_nextprime(p,p);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;The<sp/>prime<sp/>number<sp/>(base10):<sp/>%Zd<sp/>\n\n&quot;</highlight><highlight class="normal">,p);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="rsa_8h_1a94acde740fd5f6523c71d9310074e1ca" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8c_1a94acde740fd5f6523c71d9310074e1ca" kindref="member">rsaEncrypt</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>outputFile,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>publicKeyFile,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>plainText,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>isPlaintextHex)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Starting<sp/>RSA<sp/>Encryption\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>in<sp/>the<sp/>public<sp/>key<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*outputFilePtr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*publicKeyFilePtr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>outputFilePtr<sp/>=<sp/>fopen(outputFile,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(outputFilePtr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Could<sp/>not<sp/>open<sp/>output<sp/>file<sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>outputFile);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);<sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>publicKeyFilePtr<sp/>=<sp/>fopen(publicKeyFile,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(publicKeyFilePtr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Could<sp/>not<sp/>open<sp/>public<sp/>key<sp/>file:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>publicKeyFile);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(outputFilePtr);<sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);<sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/><ref refid="namespacetest_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(n);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/>encrypted;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(encrypted);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/>e;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(e);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>keyCount<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(gmp_fscanf(publicKeyFilePtr,<sp/></highlight><highlight class="stringliteral">&quot;%Zd&quot;</highlight><highlight class="normal">,<sp/>encrypted)!=<sp/>EOF<sp/>&amp;&amp;<sp/>keyCount<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(keyCount==0)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_set(n,encrypted);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;n<sp/>(in<sp/>decimal)<sp/>=<sp/>%Zd\n&quot;</highlight><highlight class="normal">,n);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(keyCount==1)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_set(e,encrypted);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;e<sp/>(in<sp/>decimal)<sp/>=<sp/>%Zd\n&quot;</highlight><highlight class="normal">,e);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyCount++;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WE<sp/>HAVE<sp/>N<sp/>AND<sp/>E<sp/>HERE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>plaintext<sp/>here<sp/>as<sp/>well<sp/>in<sp/>ascii<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/>toEncrypt;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(toEncrypt);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Plaintext<sp/>to<sp/>encrypt:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>plainText);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>import<sp/>the<sp/>string<sp/>in<sp/>ascii<sp/>as<sp/>a<sp/>single<sp/>integer<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_import(toEncrypt,<sp/>16,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>1,<sp/>0,<sp/>plainText);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;Imported<sp/>plaintext<sp/>in<sp/>base<sp/>10:<sp/>%Zd\n&quot;</highlight><highlight class="normal">,<sp/>toEncrypt);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>encryption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_powm(encrypted,toEncrypt,e,n);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_fprintf(outputFilePtr,<sp/></highlight><highlight class="stringliteral">&quot;%Zd&quot;</highlight><highlight class="normal">,<sp/>encrypted);<sp/></highlight><highlight class="comment">//<sp/>written<sp/>to<sp/>the<sp/>file<sp/>in<sp/>base<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;Encrypted<sp/>in<sp/>base<sp/>10:<sp/>%Zd\n&quot;</highlight><highlight class="normal">,<sp/>encrypted);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(n);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(encrypted);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(e);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(toEncrypt);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(publicKeyFilePtr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(publicKeyFilePtr);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(outputFilePtr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(outputFilePtr);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;End<sp/>RSA<sp/>Encryption\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="rsa_8h_1a7195163cfaccb994f5b3f28655d6e280" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8c_1a7195163cfaccb994f5b3f28655d6e280" kindref="member">rsaDecrypt</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>outputFile,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>privateKeyFile,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cipherText)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Start<sp/>RSA<sp/>Decryption\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>in<sp/>the<sp/>private<sp/>key<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*outputFilePtr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*privateKeyFilePtr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>outputFilePtr<sp/>=<sp/>fopen(outputFile,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(outputFilePtr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Could<sp/>not<sp/>open<sp/>output<sp/>file<sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>outputFile);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);<sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>privateKeyFilePtr<sp/>=<sp/>fopen(privateKeyFile,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(privateKeyFilePtr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Could<sp/>not<sp/>open<sp/>public<sp/>key<sp/>file:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>privateKeyFile);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(outputFilePtr);<sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);<sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/><ref refid="namespacetest_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(n);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/>decrypted;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(decrypted);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/>d;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(d);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>keyCount<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(gmp_fscanf(privateKeyFilePtr,<sp/></highlight><highlight class="stringliteral">&quot;%Zd&quot;</highlight><highlight class="normal">,<sp/>decrypted)!=<sp/>EOF<sp/>&amp;&amp;<sp/>keyCount<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(keyCount==0)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_set(n,decrypted);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;n<sp/>=<sp/>%Zd\n&quot;</highlight><highlight class="normal">,n);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(keyCount==1)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_set(d,decrypted);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;d<sp/>=<sp/>%Zd\n&quot;</highlight><highlight class="normal">,d);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyCount++;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>d,<sp/>n<sp/>and<sp/>the<sp/>ciphertext<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_t<sp/>toDecrypt;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_init(toDecrypt);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Ciphertext<sp/>to<sp/>decrypt:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>cipherText);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_set_str(toDecrypt,cipherText,10);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;Imported<sp/>ciphertext<sp/>in<sp/>base<sp/>10:<sp/>%Zd\n&quot;</highlight><highlight class="normal">,<sp/>toDecrypt);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_powm(decrypted,toDecrypt,d,n);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_printf(</highlight><highlight class="stringliteral">&quot;Decrypted<sp/>ciphertext<sp/>(plaintext)<sp/>is<sp/>(Base<sp/>10)<sp/>%Zd\n&quot;</highlight><highlight class="normal">,decrypted);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>decryptedText<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofDecryptedText;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>decryptedText<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>mpz_export(NULL,&amp;sizeofDecryptedText,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>1,<sp/>0,<sp/>decrypted);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Size<sp/>of<sp/>decrypted<sp/>text<sp/>is:<sp/>%ld\n&quot;</highlight><highlight class="normal">,<sp/>sizeofDecryptedText);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Decrypted<sp/>ciphertext<sp/>(plaintext)<sp/>in<sp/>ascii<sp/>is:<sp/>%s\n&quot;</highlight><highlight class="normal">,decryptedText);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytesToWrite<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>bytesToWrite&lt;sizeofDecryptedText;bytesToWrite++)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>decryptedText[bytesToWrite]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(decryptedText,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>bytesToWrite,<sp/>outputFilePtr);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(n);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(decrypted);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(d);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(toDecrypt);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>free(decryptedText);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(privateKeyFilePtr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(privateKeyFilePtr);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(outputFilePtr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(outputFilePtr);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;End<sp/>RSA<sp/>Decryption\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="rsa_8h_1a00fa4aa44618d82f5ef6ec9523cbc165" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8c_1a00fa4aa44618d82f5ef6ec9523cbc165" kindref="member">rsaWriteKeysToFile</ref>(<ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>*<sp/>rsaCtx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>publicKeyFileName,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>privateKeyFileName)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rsaCtx<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>RSA<sp/>Conext<sp/>is<sp/>NULL.\nCannot<sp/>write<sp/>keys<sp/>to<sp/>file.\nExiting.\n&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*publicKeyFilePtr;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>publicKeyFilePtr<sp/>=<sp/>fopen(publicKeyFileName,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//read<sp/>as<sp/>a<sp/>binary<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(publicKeyFilePtr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>-<sp/>Could<sp/>not<sp/>open<sp/>public<sp/>key<sp/>file.\nCannot<sp/>write<sp/>keys<sp/>to<sp/>file.\nExiting.\n&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*privateKeyFilePtr;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>privateKeyFilePtr<sp/>=<sp/>fopen(privateKeyFileName,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//read<sp/>as<sp/>a<sp/>binary<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(privateKeyFilePtr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>-<sp/>Could<sp/>not<sp/>open<sp/>private<sp/>key<sp/>file.\nCannot<sp/>write<sp/>keys<sp/>to<sp/>file.\nExiting.\n&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_fprintf(publicKeyFilePtr,</highlight><highlight class="stringliteral">&quot;%Zd\n%Zd\n&quot;</highlight><highlight class="normal">,rsaCtx-&gt;<ref refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" kindref="member">KU</ref>[1],rsaCtx-&gt;<ref refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" kindref="member">KU</ref>[0]);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>private</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>gmp_fprintf(privateKeyFilePtr,</highlight><highlight class="stringliteral">&quot;%Zd\n%Zd\n&quot;</highlight><highlight class="normal">,rsaCtx-&gt;<ref refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" kindref="member">KR</ref>[1],rsaCtx-&gt;<ref refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" kindref="member">KR</ref>[0]);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>all<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(publicKeyFilePtr);<sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(privateKeyFilePtr);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="rsa_8h_1a89855ab18349364b596e545d789ba03d" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8c_1a89855ab18349364b596e545d789ba03d" kindref="member">rsaClean</ref>(<ref refid="structrsactx__t" kindref="compound">rsactx_t</ref>*<sp/>rsaCtx)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rsaCtx<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(rsaCtx-&gt;<ref refid="structrsactx__t_1a0e4c86a571e946d9d6a5160989713989" kindref="member">p</ref>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(rsaCtx-&gt;<ref refid="structrsactx__t_1aba94275944de73c899dbeb5f987c82cd" kindref="member">q</ref>);<sp/></highlight><highlight class="comment">//<sp/>prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(rsaCtx-&gt;<ref refid="structrsactx__t_1a61aae5341c97210088a1480fa6bc2db4" kindref="member">e</ref>);<sp/></highlight><highlight class="comment">//<sp/>e<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(rsaCtx-&gt;<ref refid="structrsactx__t_1a4e9841cad572137fe14a4d6462c4469a" kindref="member">d</ref>);<sp/></highlight><highlight class="comment">//<sp/>d<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(rsaCtx-&gt;<ref refid="structrsactx__t_1ac9a71ce903d1d02bd0850eb017922d80" kindref="member">qn</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>Q(n)<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>mpz_clear(rsaCtx-&gt;<ref refid="structrsactx__t_1a6202bb3ec0e257e04ba4ac9e9f6b92b0" kindref="member">n</ref>);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>0;<sp/><ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>&lt;2;<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_clear(rsaCtx-&gt;<ref refid="structrsactx__t_1a669520018df4fe14d2e2682ed3fb62fb" kindref="member">KU</ref>[<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>]);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpz_clear(rsaCtx-&gt;<ref refid="structrsactx__t_1ab10507120c561dcb2660e5600557be47" kindref="member">KR</ref>[<ref refid="namespacemod_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>]);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rsaCtx-&gt;<ref refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" kindref="member">initKey</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(rsaCtx-&gt;<ref refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" kindref="member">initKey</ref>);<sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a41c5b03ddf5c454d46f17e889ad5182a" kindref="member">initKey</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1abf718bf2d3f32965c978cc96c1b746c2" kindref="member">initKeyLength</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>the<sp/>rng</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="random_number_generator_8c_1af6cd3a9729eb08f182d0b2df8bd8c7d8" kindref="member">destroyRNG</ref>();<sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>rsaCtx-&gt;<ref refid="structrsactx__t_1a07f83468c3d651766dd2a28e354ee294" kindref="member">numBits</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>free(rsaCtx);<sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>rsaCtx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="rsa.c"/>
  </compounddef>
</doxygen>
